************************************************************************************************************************************************************
单链表实验一号    头插法
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>

typedef struct odd
{
	int data;
	struct odd* next;
}odd, * oddd;

oddd shuru(oddd L)
{
	L = (odd*)malloc(sizeof(odd*));
	oddd q;
	int x;
	scanf("%d", &x);
	while (x != 9999)
	{
		q = (odd*)malloc(sizeof(odd*));
		q->data = x;
		q->next = L->next;
		L->next = q;
		scanf("%d", &x);
	}
	return L;
}
int main()
{
	odd temp;
	oddd dizhi = &temp;
	dizhi = shuru(dizhi);
	printf("%d", dizhi->next->data);
}
************************************************************************************************************************************************************
************************************************************************************************************************************************************
这个重点是front是指向头结点的指针，rear指向最后一个结点！
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>
typedef struct LinkList
{
	int data;
	struct LinkList* next;
}LinkList;
typedef struct
{
	LinkList* front, *rear;
}LinkQueue;
//初始化****************************************************************************************************************************************************

！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！带头节点！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！
void InitQueue(LinkQueue Q)
{
	Q.front = Q.rear = (LinkList*)malloc(sizeof(LinkList*));
	Q.front->next = NULL;
}
// 判断是否为空***********************************************************************************************************************************************
bool IsEmpty (LinkQueue Q)
{
	if (Q.front == Q.rear)
		return true;
	else
		return false;
}
//入队****************************************************************************************************************************************************
void EnQueue(LinkQueue Q, int x);
{
	LinkList* s = (LinkList*)malloc(sizeof(LinkList*));
	s->data = x;
	s->next = NULL;
	Q.rear->next = s;
	Q.rear = s;
}
//出队****************************************************************************************************************************************************
bool DeQueue(LinkQueue Q, int* x);
{
	if (Q.rear == Q.front)
		return false;
	LinkList* q = Q.front->next;
	x = q->data;
	Q.front->next = q->next;
	if (q == Q.rear)
		Q.rear = Q.front;
	free(q);
	return true;
}
************************************************************************************************************************************************************
************************************************************************************不带头节点*****************************************************************

//初始化
void InitQueue(LinkQueue Q)
{
	Q.front = Q.rear = NULL;
}
// 判断是否为空
bool IsEmpty (LinkQueue Q)
{
	if (Q.front == NULL)
		return true;
	else
		return false;
}
//入队
void EnQueue(LinkQueue Q, int x);
{
	LinkList* s = (LinkList*)malloc(sizeof(LinkList*));
	s->data = x;
	s->next = NULL;
	if (Q.front == NULL)
		Q.front = Q.rear = s;
	else
	{
		Q.rear->next = s;
		Q.rear = s;
	}
}
//出队
bool DeQueue(LinkQueue Q, int* x);
{
	if (Q.rear == NULL)
		return false;
	LinkList* q = Q.front;
	x = q->data;
	Q.front = q->next;
	if (q == Q.rear)
	{
		Q.rear = NULL;
		Q.front = NULL;
	}
	free(q);
	return true;
}

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
                                                                         三种括号的配对问题
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>
typedef struct Odd
{
	char a[100];
	int p;
}Odd;
************************************************************************************************************************************************************
可能会用到的函数
void InitStack(Odd& S); 初始化这个栈
bool EmptyStack(Odd S); 判断是否为空
bool Push(Odd& S, char x); 把x压入栈
bool Pop(Odd& S, char& x);从栈中弹出x
************************************************************************************************************************************************************
bool peidui(char q[], int length)
{
	Odd temp;
	InitStack(temp);
	for (i = 0; i < length; i++)
	{
		if (q[i]=='(' || q[i]=='[' || q[i]=='{'
			push(temp,q[i]);
		else
		{
			if (EmptyStack(temp))
			{
				return false;
			}
			char gjr;
			Pop(temp; gjr);
			if (q[i] == ')' && gjr != '(')
				return false;
			if (q[i] == ']' && gjr != '[')
				return false;
			if (q[i] == '}' && gjr != '{')
				return false;
		}
	}
	return EmptyStack(temp);
}**************

************************************************************************************************************************************************************
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>
typedef struct Odd
{
	char a[MAX];
	int front,rear,tag;
}Odd;
bool Push(Odd&s, char temp)
{
	if (s.tag == 1 && s.front == s.rear)
		return false;
	s.rear = (s.rear + 1) % MAX;
	s.a[s.rear] = temp;
	tag = 1;
	return ture;
}
bool Pop(Odd& s, char& temp)
{
	if (s.tag == 0 && s.front == s.rear)
		return false;
	s.front = (s.front + 1) % MAX;
	temp = s.a[s.front];
	tag = 0;
	return true;
}
